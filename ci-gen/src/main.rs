use crate::actions::cargo_build;
use crate::actions::cargo_doc;
use crate::actions::cargo_test;
use crate::actions::checkout_sources;
use crate::actions::rust_install_toolchain;
use crate::actions::RustToolchain;
use crate::ghwf::Env;
use crate::ghwf::Job;
use crate::ghwf::Step;
use crate::yaml::Yaml;
use crate::yaml::YamlWriter;
use std::fs::File;
use std::io::Write;

mod actions;
mod ghwf;
mod yaml;

#[derive(PartialEq, Eq, Copy, Clone)]
struct Os {
    name: &'static str,
    ghwf: Env,
}

const LINUX: Os = Os {
    name: "linux",
    ghwf: Env::UbuntuLatest,
};
const MACOS: Os = Os {
    name: "macos",
    ghwf: Env::MacosLatest,
};
const WINDOWS: Os = Os {
    name: "windows",
    ghwf: Env::WindowsLatest,
};

fn steps(os: Os, channel: RustToolchain) -> Vec<Step> {
    let mut r = vec![];
    r.push(checkout_sources());
    r.push(rust_install_toolchain(channel));

    // Slow as death
    if false && os.ghwf == Env::WindowsLatest {
        r.push(Step::run(
            "Install OpenSSL",
            "vcpkg install openssl:x64-windows",
        ));
    }

    if os.ghwf == Env::WindowsLatest {
        // It's too hard to install OpenSSL on Windows, so build main crate only

        r.push(cargo_build("cargo build main crate only", "-p httpbis"));
    } else {
        // Use one thread for better errors
        r.push(cargo_test(
            &format!("cargo test"),
            "--all --all-targets -- --test-threads=1",
        ));
        // `--all-targets` does not include doctests
        // https://github.com/rust-lang/cargo/issues/6669
        r.push(cargo_test("cargo test --doc", "--doc"));
        r.push(cargo_doc("doc", ""));
    }
    r
}

fn jobs() -> Yaml {
    let mut r = Vec::new();
    for &channel in &[
        RustToolchain::Stable,
        RustToolchain::Beta,
        RustToolchain::Nightly,
    ] {
        for &os in &[LINUX, MACOS, WINDOWS] {
            if channel != RustToolchain::Stable && os != LINUX {
                // skip some jobs because macos and windows are expensive
                continue;
            }
            r.push(Job {
                id: format!("{}-{}", os.name, channel),
                name: format!("{} {}", os.name, channel),
                runs_on: os.ghwf.to_owned(),
                steps: steps(os, channel),
                env: if os == WINDOWS {
                    vec![("VCPKGRS_DYNAMIC".to_owned(), "1".to_owned())]
                } else {
                    Vec::new()
                },
                ..Default::default()
            });
        }
    }

    r.push(Job {
        id: format!("h2spec"),
        name: format!("h2spec"),
        runs_on: LINUX.ghwf.to_owned(),
        steps: vec![
            checkout_sources(),
            Step::run("Install h2spec", "ci/install-h2spec.sh"),
            cargo_build("Build h2spec test", "--manifest-path h2spec-test/Cargo.toml --bin the_test"),
            Step::run(
                "Run h2spec test",
                "PATH=\"$(pwd):$PATH\" cargo run --manifest-path h2spec-test/Cargo.toml --bin the_test",
            )
        ],
        ..Default::default()
    });

    Yaml::map(r.into_iter().map(Job::into))
}

fn main() {
    let yaml = Yaml::map(vec![
        ("on", Yaml::list(vec!["push", "pull_request"])),
        ("name", Yaml::string("Jobs")),
        ("jobs", jobs()),
    ]);

    let mut writer = YamlWriter::default();
    writer.write_line(&format!(
        "# @generated by {}, do not edit",
        env!("CARGO_PKG_NAME")
    ));
    writer.write_line("");
    writer.write_yaml(&yaml);
    File::create(".github/workflows/ci.yml")
        .unwrap()
        .write_all(writer.buffer.as_bytes())
        .unwrap();
}
